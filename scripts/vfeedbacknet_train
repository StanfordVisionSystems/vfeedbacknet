#!/usr/bin/env python3

import asyncio
import argparse
import logging
import csv
import os
import sys
import timeit
import random
import multiprocessing as mp
from concurrent.futures import ThreadPoolExecutor
import numpy as np
import keras
import tensorflow as tf
from tensorflow.python.client import device_lib
import PIL
from PIL import Image

import vfeedbacknet as v

logging.basicConfig(level=logging.DEBUG)

def pool_init(mem_pool_):
    global mem_pool
    mem_pool = mem_pool_
            
def prepare_video(args):
    data_root, video_num, video_width, video_height, video_length, video_index, batch_size, pool_index = args

    video_mem = np.frombuffer(mem_pool[pool_index], np.ctypeslib.ctypes.c_float)
    video_mem = video_mem.reshape((batch_size, video_length, video_height, video_width, 3))

    pathgen = lambda x : os.path.join(data_root, str(video_num), x)
    frames = sorted( os.listdir(pathgen('')) )

    num_frames = min(len(frames), video_length)

    video_mem[video_index,:,:,:,:] = 0 # make grey
    for i in range(num_frames):
        image = Image.open(pathgen(frames[i])) # in RGB order by default
        image = np.asarray(image.resize((video_width, video_height), PIL.Image.BICUBIC), dtype=np.float32)
        video_mem[video_index,i,:,:,:] = (image / 128) - 1 # squash to interval (-1, 1)
        
    return { 'num_frames' : num_frames, 'video_num' : video_num }


def load_videos(pool, data_root, data_labels, video_nums, video_width, video_height, video_length, batch_size, mem_pool, pool_index):

    prepare_video_jobs = [ (data_root, video_nums[i], video_width, video_height, video_length, i, batch_size, pool_index) for i in range(batch_size) ]
    prepared_videos = pool.map(prepare_video, prepare_video_jobs)

    video_numframes = np.zeros((batch_size,), dtype=np.int32)
    video_labelnums = np.zeros((batch_size,), dtype=np.int32)

    for i in range(batch_size):
        video_numframes[i] = prepared_videos[i]['num_frames']
        video_labelnums[i] = data_labels[ prepared_videos[i]['video_num'] ]
        
    video_mem = np.frombuffer(mem_pool[pool_index], np.ctypeslib.ctypes.c_float)
    video_mem = video_mem.reshape((batch_size, video_length, video_height, video_width, 3))

    batch = {
        'num_videos' : batch_size,
        'video_rawframes' : video_mem,
        'video_numframes' : video_numframes,
        'video_labelnums' : video_labelnums,
    }

    return batch

def main(args):
    with open(args.label_file, 'r') as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        labels_num2str = [ item[0].lower() for item in reader ]
        labels_str2num =  { label : idx  for idx,label in zip(range(len(labels_num2str)), labels_num2str) }

    with open(args.validation_file, 'r') as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        validation_labels = { int(item[0]) : labels_str2num[item[1].lower()] for item in reader }; 
        validation_video_nums = np.asarray( list(validation_labels.keys()) )
        
    with open(args.data_file, 'r') as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        data_labels = { int(item[0]) : labels_str2num[item[1].lower()] for item in reader }; 
        data_video_nums = np.asarray( list(data_labels.keys()) )

        #data_video_nums = data_video_nums[:1024] # force overfitting
        
    # local_device_protos = device_lib.list_local_devices()
    # available_gpus = [x.name for x in local_device_protos if x.device_type == 'GPU']
    # num_gpus = len(available_gpus)
    # logging.debug('there are {} available gpus: {}'.format(num_gpus, available_gpus))
    
    # build model
    x_input = tf.placeholder(tf.float32, [None, args.video_length, args.video_height, args.video_width, 3], name='input')
    x_length = tf.placeholder(tf.int32, [None,], name='input_length')
    y_label = tf.placeholder(tf.float32, [None, len(labels_num2str)], name='label')
    y_zeros = tf.placeholder(tf.float32, [None,],  name='zeros')

    loss, predictions, accruacy = v.nofeedback_model(args.video_length, args.video_width, args.video_height, len(labels_num2str), x_input, x_length, y_label, y_zeros)

    train_step = tf.train.AdamOptimizer(args.learning_rate).minimize(loss)
    #train_step = tf.train.AdadeltaOptimizer(args.learning_rate).minimize(loss)

    # allocate shared memory up front
    logging.debug('begin allocate memory buffers')
    t1 = timeit.default_timer()
    mem_pool = [mp.RawArray(np.ctypeslib.ctypes.c_float, args.prefetch_batch_size*args.video_length*args.video_height*args.video_width*3) for _ in range(2)]
    zeros = np.zeros((args.train_batch_size,))
    t2 = timeit.default_timer()
    logging.debug('done! (allocate memory buffers: {})'.format(t2-t1))
    
    round2num = lambda x, num: num * (x // num)
    num_data_videos = round2num(len(data_video_nums), args.prefetch_batch_size)
    num_batch_videos = round2num(args.prefetch_batch_size, args.train_batch_size)
    assert(num_batch_videos == args.prefetch_batch_size) # make `prefetch_batch_size` a multiple of `train_batch_size`
    
    # get batch of data and train
    with mp.Pool(processes=mp.cpu_count()//2, initializer=pool_init, initargs=(mem_pool,)) as pool:
        with ThreadPoolExecutor(max_workers=2) as executor:
            mem_pool_index = 0
            video_batch = None
            next_video_batch = load_videos(pool, args.data_root, data_labels, data_video_nums[0:args.prefetch_batch_size], args.video_width, args.video_height, args.video_length, args.prefetch_batch_size, mem_pool, mem_pool_index)
            mem_pool_index = (mem_pool_index + 1) % 2

            with tf.Session(config=tf.ConfigProto(log_device_placement=True)) as sess:
                sess.run(tf.global_variables_initializer())
            
                for epoch in range(args.num_epoch):
                    video_nums = data_video_nums.copy()
                    random.shuffle(video_nums)
                    
                    for i in range(0, num_data_videos, args.prefetch_batch_size):
                        video_nums_batch = video_nums[i:i+args.prefetch_batch_size]

                        video_batch = next_video_batch
                        
                        logging.debug('begin kickoff load videos thread')
                        t1 = timeit.default_timer() 
                        future = executor.submit(load_videos, pool, args.data_root, data_labels, video_nums_batch, args.video_width, args.video_height, args.video_length, args.prefetch_batch_size, mem_pool, mem_pool_index)
                        mem_pool_index = (mem_pool_index + 1) % 2
                        t2 = timeit.default_timer()
                        logging.debug('done! (kickoff load videos thread: {})'.format(t2-t1))

                        # print('out a video to make sure things are working')
                        # for i in range(40):
                        #     frame = (128*(video_batch['video_rawframes'][0,i,:,:,:] + 1)).astype(dtype=np.uint8)
                        #     im = Image.fromarray(frame)
                        #     im.save('/home/jemmons/frame{}.jpg'.format(i))

                        assert(not np.any(np.isnan(video_batch['video_rawframes'])))
                    
                        logging.debug('begin train batch')
                        t1 = timeit.default_timer()
                        for j in range(0, num_batch_videos, args.train_batch_size):
                            begin = j
                            end = j + args.train_batch_size

                            _, loss_val, predict_vals = sess.run([train_step, loss, predictions],
                                                                 feed_dict={x_input : video_batch['video_rawframes'][begin:end,:,:,:,:],
                                                                            x_length : video_batch['video_numframes'][begin:end],
                                                                            y_label : keras.utils.to_categorical(video_batch['video_labelnums'][begin:end],
                                                                            len(labels_num2str)), y_zeros : zeros})                        

                            #print(predict_vals[0,:,:].shape)
                            #print(video_batch['video_numframes'][begin:end])
                            predict_vals = np.vstack([predict_vals[n-1,m,:] for n,m in zip(video_batch['video_numframes'][begin:end],range(args.train_batch_size))])
                            #print(predict_vals.shape)
                            #print('prediction:', predict_vals.shape)
                            #print(np.arrayvideo_batch['video_labelnums'][begin:end])
                            #print(np.argmax(predict_vals, axis=1))
                            #sys.stdout.write('{}\n{}\n'.format(video_batch['video_labelnums'][begin:end], predict_vals))

                            sys.stdout.write('training accuracy: {}\n'.format(sum(video_batch['video_labelnums'][begin:end] == np.argmax(predict_vals, axis=1)) / args.train_batch_size))
                            sys.stdout.write('loss: {}\n'.format(loss_val))
                            sys.stdout.flush()                        

                        t2 = timeit.default_timer()
                        logging.debug('done! (train batch: {})'.format(t2-t1))

                        # block until the next data batch is complete
                        logging.debug('begin block on load videos thread')
                        t1 = timeit.default_timer() 
                        next_video_batch = future.result()
                        t2 = timeit.default_timer()
                        logging.debug('done! (block on load videos thread: {})'.format(t2-t1))

                        #t1 = timeit.default_timer() 
                        #validation_set = load_videos(pool, mem_pool, args.data_root, validation_video_nums, args.video_width, args.video_height, args.video_length, len(validation_video_nums))
                        #t2 = timeit.default_timer()
                        #print('done loading validation set!', t2 - t1)
                
                        # save the trained model!
                        # ...

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='train the feedbacknet for the 20BN data set')

    # dataset parameters
    parser.add_argument('label_file', type=str, nargs=None,
                        help='20bn labels file (e.g. jester-v1-labels.csv)')

    parser.add_argument('validation_file', type=str, nargs=None,
                        help='20bn validation label file (e.g. jester-v1-validation.csv)')

    parser.add_argument('data_file', type=str, nargs=None,
                        help='20bn data label file (e.g. jester-v1-train.csv)')

    parser.add_argument('data_root', type=str, nargs=None,
                        help='root of 20bn dataset (e.g. ~/20bn-datasets/20bn-jester-v1)')

    # tuning parameters
    parser.add_argument('--video_width', type=int, nargs=None,
                        help='the width to rescale all videos (official run: 176 for 20bn)',
                        default=176)

    parser.add_argument('--video_height', type=int, nargs=None,
                        help='the height to rescale all videos (official run: 100 for 20bn)',
                        default=100)

    parser.add_argument('--video_length', type=int, nargs=None,
                        help='the num frames to truncate all videos (official run: 40 for 20bn)',
                        default=40)

    parser.add_argument('--num_epoch', type=int, nargs=None,
                        help='number of training epochs over the whole dataset (official run: 16 for 20bn)',
                        default=1600)

    parser.add_argument('--learning_rate', type=float, nargs=None,
                        help='learning rate for the optimization (official run: XXXX for 20bn)',
                        default=1e-4)

    parser.add_argument('--train_batch_size', type=int, nargs=None,
                        help='training batch size; num videos per batch (official run: XXXX for 20bn)',
                        default=64)

    parser.add_argument('--prefetch_batch_size', type=int, nargs=None,
                        help='number of videos to prefetch (official run: XXXX for 20bn)',
                        default=1024)

    args = parser.parse_args()
    main(args)

